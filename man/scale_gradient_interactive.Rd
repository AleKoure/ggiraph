% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/00_scale.R
\name{scale_gradient_interactive}
\alias{scale_gradient_interactive}
\alias{scale_colour_gradient_interactive}
\alias{scale_color_gradient_interactive}
\alias{scale_fill_gradient_interactive}
\title{Create your own interactive gradient scale}
\usage{
scale_colour_gradient_interactive(..., low = "#132B43",
  high = "#56B1F7", space = "Lab", na.value = "grey50",
  guide = "colourbar", aesthetics = "colour", data_id = NULL,
  onclick = NULL, tooltip = NULL)

scale_color_gradient_interactive(..., low = "#132B43",
  high = "#56B1F7", space = "Lab", na.value = "grey50",
  guide = "colourbar", aesthetics = "colour", data_id = NULL,
  onclick = NULL, tooltip = NULL)

scale_fill_gradient_interactive(..., low = "#132B43", high = "#56B1F7",
  space = "Lab", na.value = "grey50", guide = "colourbar",
  aesthetics = "fill", data_id = NULL, onclick = NULL,
  tooltip = NULL)
}
\arguments{
\item{...}{Arguments passed on to \code{continuous_scale}
\describe{
  \item{scale_name}{The name of the scale}
  \item{palette}{A palette function that when called with a numeric vector with
values between 0 and 1 returns the corresponding values in the range the
scale maps to.}
  \item{name}{The name of the scale. Used as the axis or legend title. If
\code{waiver()}, the default, the name of the scale is taken from the first
mapping used for that aesthetic. If \code{NULL}, the legend title will be
omitted.}
  \item{breaks}{One of:
\itemize{
\item \code{NULL} for no breaks
\item \code{waiver()} for the default breaks computed by the
transformation object
\item A numeric vector of positions
\item A function that takes the limits as input and returns breaks
as output
}}
  \item{minor_breaks}{One of:
\itemize{
\item \code{NULL} for no minor breaks
\item \code{waiver()} for the default breaks (one minor break between
each major break)
\item A numeric vector of positions
\item A function that given the limits returns a vector of minor breaks.
}}
  \item{labels}{One of:
\itemize{
\item \code{NULL} for no labels
\item \code{waiver()} for the default labels computed by the
transformation object
\item A character vector giving labels (must be same length as \code{breaks})
\item A function that takes the breaks as input and returns labels
as output
}}
  \item{limits}{One of:
\itemize{
\item \code{NULL} to use the default scale range
\item A numeric vector of length two providing limits of the scale.
Use \code{NA} to refer to the existing minimum or maximum
\item A function that accepts the existing (automatic) limits and returns
new limits
}}
  \item{rescaler}{Used by diverging and n colour gradients
(i.e. \code{\link[=scale_colour_gradient2]{scale_colour_gradient2()}}, \code{\link[=scale_colour_gradientn]{scale_colour_gradientn()}}).
A function used to scale the input values to the range [0, 1].}
  \item{oob}{Function that handles limits outside of the scale limits
(out of bounds). The default replaces out of bounds values with \code{NA}.}
  \item{trans}{Either the name of a transformation object, or the
object itself. Built-in transformations include "asn", "atanh",
"boxcox", "date", "exp", "hms", "identity", "log", "log10", "log1p", "log2",
"logit", "modulus", "probability", "probit", "pseudo_log", "reciprocal",
"reverse", "sqrt" and "time".

A transformation object bundles together a transform, its inverse,
and methods for generating breaks and labels. Transformation objects
are defined in the scales package, and are called \code{name_trans}, e.g.
\code{\link[scales:boxcox_trans]{scales::boxcox_trans()}}. You can create your own
transformation with \code{\link[scales:trans_new]{scales::trans_new()}}.}
  \item{position}{The position of the axis. "left" or "right" for vertical
scales, "top" or "bottom" for horizontal scales}
  \item{super}{The super class to use for the constructed scale}
  \item{expand}{Vector of range expansion constants used to add some
padding around the data, to ensure that they are placed some distance
away from the axes. Use the convenience function \code{\link[=expand_scale]{expand_scale()}}
to generate the values for the \code{expand} argument. The defaults are to
expand the scale by 5\% on each side for continuous variables, and by
0.6 units on each side for discrete variables.}
}}

\item{low}{Colours for low and high ends of the gradient.}

\item{high}{Colours for low and high ends of the gradient.}

\item{space}{colour space in which to calculate gradient. Must be "Lab" -
other values are deprecated.}

\item{na.value}{Colour to use for missing values}

\item{guide}{Type of legend. Use \code{"colourbar"} for continuous
colour bar, or \code{"legend"} for discrete colour legend.}

\item{aesthetics}{Character string or vector of character strings listing the
name(s) of the aesthetic(s) that this scale works with. This can be useful, for
example, to apply colour settings to the \code{colour} and \code{fill} aesthetics at the
same time, via \code{aesthetics = c("colour", "fill")}.}

\item{data_id}{a single character value, the identifier. Identifier is available
as a reactive input value in shiny applications.}

\item{onclick}{a single character value, associated JavaScript action. Action will be
executed when the legend will be clicked.}

\item{tooltip}{a single character value, the tooltip value, text and html are supported.}
}
\description{
The scale is based on \code{\link[ggplot2]{scale_colour_gradient}}.
These functions allow you to make interactive legends associated with a
layer.

For a continuous interactive scale, only single tooltip, data_id and onclick
is available. The primary goal when this function has been written was to enable
a click on a legend in a shiny application.
}
\note{
It is not planned to provide a more advanced interactivity within shiny applications
but contributions are welcome.
}
\seealso{
Other interactive scale: \code{\link{scale_manual_interactive}}
}
\concept{interactive scale}
